#!/usr/bin/python -tt
"""Python script to start sfuzz with basic configuration and use the fuzzing payload generated by it for fuzzing
openstack services using curl command"""
import subprocess
import os
import json
mydict={}
sfuzzconfig = raw_input("Specify the absolute file location of the sfuzz config : ")
print sfuzzconfig
#function to start sfuzz and create fuzzing payload
def start_sfuzz(sfuzzconfig):
	print "Starting sfuzz to create fuzz payload"
	subprocess.call(["sfuzz", "-O", "-f", sfuzzconfig, "-v", "-l", "-r", "-L", "Log"])
	print "Succesfully generated fuzz payload in log file"
#function to scan the log file of sfuzz and use only the required fuzz input and excluding other information
def scan_logfile():
	i=1
	file_object = open("Log", "r")
	for line in file_object:
		if line[0]!= "[":
			mydict[i]=line[:-1]
			i+=1
	print mydict		
		
#Function to get token from keystone and store it in output.txt
def get_token():
		print "Getting token from keystone"
		password = raw_input("Enter authentication password for getting keystone token : ")
		subprocess.call(['./sheel.sh',password])
#Function to parse the json output in output.txt to get the token and export it in environmental variable token
def parse_json():
	file_object = open('jsonoutput.txt','r')
	data=""
	for line in file_object:
	        data += line
	jsondata = json.loads(data)
	print json.dumps(data, indent=4)
	token = jsondata['access']['token']['id']
	print token
	for key, value in mydict.iteritems():
                print "Fuzz test : ", key
                subprocess.call(['./api.sh',value,token])
        print "Succesfully finished fuzzing"
start_sfuzz(sfuzzconfig)
scan_logfile()
get_token()
parse_json()
